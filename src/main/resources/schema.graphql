schema {
    query: Query,
    mutation: Mutation
}

type Query {
    user: User
    establishments: [Establishment!]!
}

type Mutation {
    user: MutableUser
}

type Establishment {
    name: String!
    methods: [FetchMethod!]!
}

type FetchMethod {
    name: String!
}

type User {
    username: String!
    name: String!
    studentClass: String!
    avatar: String

    class: StudentClass!

    admin: Boolean!
    representative: Boolean!

    homeworksEnabled: Boolean!
    averagesEnabled: Boolean!
    filesEnabled: Boolean!

    periods: [Period!]!
    timetable: [Week!]!
    menu: [[String!]]
    homeworks: [Homework!]
    marks: [Marks!]!
    reports: [Report!]!
    absences: [Absences!]!
    files: [File!]

    lastMarks: [Mark!]!
    nextLesson: [Lesson]!
    tomorrow: Tomorrow!
    holidays: NextHolidays!
    away: [Week!]!
    reminders: [Reminder!]!
    isLong(homework: String!): Boolean!
}

type MutableUser {
    homework(id: String): MutableHomework
    representative(user: String): Boolean!
    class: MutableStudentClass!

    addReminder(title: String!, content: String!, time: Long!): Reminder!
    removeReminder(title: String!): Reminder!
}

type StudentClass {
    representatives: [String!]!
    reminders: [Reminder!]!
}

type MutableStudentClass {
    addRepresentative(user: String!): String!
    removeRepresentative(user: String!): String!

    addReminder(title: String!, content: String!, time: Long!): Reminder!
    removeReminder(title: String!): Reminder!

    notify(content: String!): String!
}

type Period {
    id: Int!
    name: String!
    isDefault: Boolean!
    from: Long!
    to: Long!
}

type File {
    time: Long
    name: String!
    subject: String
    url: String!
}

type Week {
    id: String!

    time: Long!
    content: [Lesson!]!
}

type Lesson {
    id: String!

    subject: String!
    teacher: String!
    room: String
    status: String

    from: Long!
    to: Long!

    away: Boolean!
    cancelled: Boolean!
}

type Homework {
    id: String!

    subject: String!
    content: String!
    since: Long!
    until: Long!
    toGive: Boolean
    files: [File!]
    long: Boolean!
}

type MutableHomework {
    id: String!
    long(long: Boolean!): Boolean!
}

type Marks {
    period: Int!
    marks: [SubjectMarks!]!
    averages: Averages!
}

type SubjectMarks {
    name: String!
    average: Float!
    studentClassAverage: Float!
    maxAverage: Float!
    minAverage: Float!
    marks: [Mark!]!
}

type Mark {
    id: String!

    subject: String!
    title: String
    value: Float!
    away: Boolean!
    max: Float!
    time: Long!
    average: Float
    higher: Float
    lower: Float
    coefficient: Float
    period: Int!
}

type Averages {
    student: Float!
    studentClass: Float!
    period: Int!
}

type Report {
    period: Int!
    subjects: [ReportSubject!]!
    averages: Averages!
    comments: [Comment!]!
}

type ReportSubject {
    name: String!
    average: Float!
    studentClassAverage: Float!
    maxAverage: Float!
    minAverage: Float!
    comment: String!
    coefficient: Float!
}

type Comment {
    title: String!
    value: String!
}

type Absences {
    period: Int!
    absences: [Absence!]!
}

type Absence {
    from: Long!
    to: Long!
    solved: Boolean!
    justified: Boolean!
    reason: String!
}

type Reminder {
    title: String!
    content: String!
    author: String!
    time: Long!
}

type Tomorrow {
    tomorrow: Long!
    timetable: [Lesson!]!
    reminders: [Reminder!]!
    homeworks: [Homework!]!
}

type NextHolidays {
    day: DayHoliday
    untilDay: Long
    period: PeriodHoliday
    untilPeriod: Long
}

type DayHoliday {
    name: String!
    time: Long!
}

type PeriodHoliday {
    name: String!
    from: Long!
    to: Long!
}